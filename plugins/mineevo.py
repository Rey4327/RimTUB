LOG_CHAT    = -1002021325556
WORKER_CHAT = -1002005211238


from typing import List, Union
from pyrogram import filters, errors, types, enums
from utils import (
    Cmd, get_group, code, b, pre, bq,
    helplist, Module, Argument as Arg, Feature, Command,
    plural, parse_amout,
    ModifyPyrogramClient as Client,
    make_request
)
import asyncio
from bs4 import BeautifulSoup

cmd = Cmd(G:=get_group())

helplist.add_module(
    Module(
        "MineEvo",
        description="–ú–æ–¥—É–ª—å –¥–ª—è –∏–≥—Ä—ã @mine_evo_bot",
        author="@RimMirK & @kotcananacom",
        version='3.1.0'
    ).add_command(
        Command(['mine'], [], '–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É')
    ).add_command(
        Command(['mdig'], [], '–Ω–∞—á–∏–Ω–∞–µ—Ç –∫–æ–ø–∞—Ç—å')
    ).add_command(
        Command(['mstopdig', 'mnodig', 'mundig'], [], '–ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –∫–æ–ø–∞—Ç—å')
    ).add_command(
        Command(['evo'], [Arg('–∑–∞–ø—Ä–æ—Å/–∫–æ–º–∞–Ω–¥–∞')], '–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å/–∫–æ–º–∞–Ω–¥—É –≤ —Ä–æ–±–æ—á–∏–π —á–∞—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç. –ü—Ä–∏–º–µ—Ä: .evo –≤—Ä–µ–º—è')
    ).add_command(
        Command(['bevo'], [Arg('–∑–∞–ø—Ä–æ—Å/–∫–æ–º–∞–Ω–¥–∞')], '–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å/–∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –≤ –õ–° –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç. –ü—Ä–∏–º–µ—Ä: .evo –≤—Ä–µ–º—è')
    ).add_command(
        Command(['mprof', '–º–ø—Ä–æ—Ñ'], [], '–í—ã–≤–æ–¥–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å')
    ).add_command(
        Command(['mcases', '–º–∫', '–º–∫–µ–π—Å—ã'], [], '–≤—ã–≤–æ–¥–∏—Ç —Ç–≤–æ–∏ –∫–µ–π—Å—ã')
    ).add_command(
        Command(["mopen", "mcase", '–º–æ', '–º–æ—Ç–∫', '–º–æ—Ç–∫—Ä—ã—Ç—å'], [Arg('([—Ç–∏–ø –∫–µ–π—Å–∞] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]), ..')],'–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–µ–π—Å—ã –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤. –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –∫–µ–π—Å–æ–≤ –ü—Ä–∏–º–µ—Ä—ã: .–æ—Ç–∫ –∫ 36 | .–æ—Ç–∫ –∫—Ç 27 —Ä–∫—Ç 6 –∫ 3 ')
    ).add_command(
        Command(['–º–æ—Ç–∫–ª', 'mopenlim'], [Arg('–∫–æ–ª-–≤–æ')],'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤ –∑–∞ —Ä–∞–∑')
    ).add_command(
        Command(['mdelay'], [Arg('—Å–µ–∫')], '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –∫–æ–ø–∫—É')
    # ).add_command(
    #     Command(['mb'], [], '')
    ).add_feature(
        Feature('–ê–≤—Ç–æ-–≤—ã–±–æ—Ä–∫–∞ —à–∞—Ö—Ç—ã', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–±–æ—Ä–∫–∞ —à–∞—Ö—Ç—ã –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è')
    ).add_feature(
        Feature('Log', '–û—Ç—á–µ—Ç –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–µ–π—Å–∞–º, –Ω–∞–π–¥–µ–Ω–Ω—ã–º –±—É—Å—Ç–µ—Ä–∞–º, —É–±–∏—Ç—ã–º –±–æ—Å—Å–∞–º')
    )
)

M = 'MineEVO'

plural_raz = ["—Ä–∞–∑", "—Ä–∞–∑–∞", "—Ä–∞–∑"]


@cmd(['mine'])  
async def _mine(app, msg):
    c = await app.db.get(M, 'c', 0)
    all_c = await app.db.get(M, 'all_c', 0)
    await msg.edit(
        "–ö–æ–ø–∞—é: " + b(
            '–î–∞ <emoji id="5359300921123683281">‚úÖ</emoji>'
            if await app.db.get(M, 'work', False)
            else '–ù–µ—Ç <emoji id="5359457318062798459">‚ùå</emoji>', False
        ) + '\n'
        f"–í—Å–∫–æ–ø–∞–ª: " + b(f"{c} {plural(c, plural_raz)}") + '\n'
        f"–í—Å–µ–≥–æ –≤—Å–∫–æ–ø–∞–ª: " + b(f"{all_c} {plural(all_c, plural_raz)}") + '\n'
    )

async def digger(app):
    while True:
        if await app.db.get(M, 'work', False):
            app.print('–∫–æ–ø')

            try: await app.send_message('mine_EVO_bot', "‚õè –ö–æ–ø–∞—Ç—å")
            except errors.flood_420.FloodWait as s:
                try: await asyncio.sleep(s)
                except: await asyncio.sleep(1)
                await app.send_message('mine_EVO_bot', "‚õè –ö–æ–ø–∞—Ç—å")

            
            

            await asyncio.sleep(await app.db.get(M, 'delay', 3)) 
        else: return


@cmd(['mdig'])
async def _dig(app, msg):
    if await app.db.get(M, 'work', False):
        await msg.edit("‚ùé –Ø –∏ —Ç–∞–∫ –∫–æ–ø–∞—é")
        return
    
    await app.db.set(M, 'work', True)

    await msg.edit("‚úÖ –∫–æ–ø–∞—é")
    await digger(app)
    

@cmd(['mstopdig', 'mnodig', 'mundig'])
async def _stopdig(app, msg):
    if not await app.db.get(M, 'work', False):
        return await msg.edit(f'‚ùé –∞ —è –∏ –Ω–µ –∫–æ–ø–∞—é')

    await app.db.set(M, 'work', False)

    c = await app.db.get(M, 'c', 0)
    await msg.edit(f'‚ùé –Ω–µ –∫–æ–ø–∞—é. –£—Å–ø–µ–ª –∫–æ–ø–Ω—É—Ç—å {b(c)} {b(plural(c, plural_raz))}')

    await app.db.set(M, 'c', 0)
    await app.db.delete(M, 'stats')


@cmd(['mdelay'])
async def _mdelay(app, msg):
    try:
        delay = float(msg.text.split(maxsplit=1)[-1])
        await app.db.set(M, 'delay', delay)
        await msg.edit(f"–ó–∞–¥–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {delay}")
    except:
        await msg.edit('–æ—à–∏–±–∫–∞')


@Client.on_ready(group=get_group())
async def _on_ready(app, *_):
    await digger(app)



pref = {
    'K':  10**(3*1),
    'M':  10**(3*2),
    'B':  10**(3*3),
    'T':  10**(3*4),
    'Qa': 10**(3*5),
    'Qi': 10**(3*6),
    'Sx': 10**(3*7),
    'Sp': 10**(3*8),
    'O':  10**(3*9),
    'N':  10**(3*10),
    'D':  10**(3*11),
    "Aa": 10**(3*12),
    "Bb": 10**(3*13),
    "Cc": 10**(3*14),
    "Dd": 10**(3*15),
    "Ee": 10**(3*16),
    "Ff": 10**(3*17),
    "Gg": 10**(3*18),
    "Hh": 10**(3*19),
    "Ii": 10**(3*20),
    "Jj": 10**(3*21),
    "Kk": 10**(3*22),
    "Ll": 10**(3*23),
    "Mm": 10**(3*24),
    "Nn": 10**(3*25),
    "Oo": 10**(3*26),
    "Pp": 10**(3*27),
    "Qq": 10**(3*28),
    "Rr": 10**(3*29),
    "Ss": 10**(3*30),
    "Tt": 10**(3*31),
    "Uu": 10**(3*32),
    "Vv": 10**(3*33),
    "Ww": 10**(3*34),
    "Xx": 10**(3*35),
    "Yy": 10**(3*36),
    "Zz": 10**(3*37)
}



# @cmd(['send'])
async def _send(app, msg):
    _, nickname, count, val = msg.text.split(maxsplit=3)
    count = int(count)
    to_send = parse_amout(val, pref) / (1 - .1), 2
    await msg.edit(
        f"üí≤ –ø–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫—É {code(nickname)}\n"
        f"{code(count)} —Ä–∞–∑ –ø–æ {code(val)}.\n"
        f"–° —É —á—ë—Ç–æ–º –∫–æ–º–∏—Å–∏–∏: {code(round(to_send, 2))}\n"
        f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {b(count * 2)} —Å.\n"
        f"–∏–ª–∏ {b(round(count * 2 / 60, 2))} –º.\n"
        f"–∏–ª–∏ {b(round(count * 2 / 60 / 60, 2))} —á."
    )

@cmd(["mopen", "mcase", '–º–æ', '–º–æ—Ç–∫', '–º–æ—Ç–∫—Ä—ã—Ç—å'])
async def _open(app, msg):
    try:
        _, *values = msg.text.split()

        if len(values) % 2 != 0:
            raise ValueError()

        await msg.edit(f"üì§ –æ—Ç–∫—Ä—ã–≤–∞—é {f', '.join([f'{values[i]} {values[i + 1]}' for i in range(0, len(values), 2)])}")

        for amout, case_type in [(values[i], values[i + 1]) for i in range(0, len(values), 2)]:
            await asyncio.sleep(2)

            try: amout = int(amout)
            except ValueError:
                amout, case_type = case_type, amout
                amout = int(amout)

            caselim = await app.db.get(M, 'caselim', 20)

            groups = [*[caselim]*(amout//caselim), amout%caselim]
            try: groups.remove(0)
            except: pass

            for am in groups:
                await asyncio.sleep(2)
                await app.send_message(msg.chat.id, f"–æ—Ç–∫—Ä—ã—Ç—å {case_type} {am}")

    except (IndexError, ValueError) as e: 
        print(e)
        await msg.edit(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!"
        )

@cmd(['–º–æ—Ç–∫–ª', 'mopenlim'])
async def _mopenlim(app, msg):
    try:
        lim = int(msg.text.split(maxsplit=1)[-1])
        await app.db.set(M, 'caselim', lim)
        await msg.edit(b("–ì–æ—Ç–æ–≤–æ!"))
    except IndexError:
        return await msg.edit(b('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!'))


split_to = lambda text, to=None: text if to is None else (text+' ')[:text.find(to)]

SAD = '<emoji id=5319007148565341481>‚òπÔ∏è</emoji>'
LOADING = '<emoji id=5821116867309210830>‚è≥</emoji>'

layout = (
    b("–ó–∞–ø—Ä–æ—Å:") + "\n"
    + bq('{0}') +
    b("–û—Ç–≤–µ—Ç –ë–æ—Ç–∞:") + "\n"
    + bq('{1}')
)

@cmd('evo')
async def _evo(app, msg):
    await msg.edit(f'{LOADING} –ó–∞–≥—Ä—É–∑–∫–∞...')
    query = msg.text.split(maxsplit=1)[1]
    answer = await make_request(app, query, WORKER_CHAT, timeout=10)
    await msg.edit(f"{SAD} –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" if answer is None else layout.format(query, answer.text.html),
        disable_web_page_preview=True
    )

@cmd('bevo')
async def _bevo(app, msg):
    await msg.edit(f'{LOADING} –ó–∞–≥—Ä—É–∑–∫–∞...')
    query = msg.text.split(maxsplit=1)[1]
    answer = await make_request(app, query, 'mine_evo_bot', timeout=10)
    await msg.edit(f"{SAD} –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" if answer is None else (query, answer.text.html),
        disable_web_page_preview=True
    )


@cmd(['mcases', '–º–∫', '–º–∫–µ–π—Å—ã'])
async def _cases(app, msg):
    await msg.edit(f'{LOADING} –ó–∞–≥—Ä—É–∑–∫–∞...')
    answer = await make_request(app, '–∫–µ–π—Å—ã', WORKER_CHAT, 'üì¶ –ö–µ–π—Å—ã –∏–≥—Ä–æ–∫–∞', 10)
    await msg.edit(
        f"{SAD} –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" if answer is None else split_to(split_to(answer.text.html, '‚òÉÔ∏è'), '–û—Ç–∫—Ä—ã—Ç—å'),
        disable_web_page_preview=True
    )


@cmd(['mprof', 'mp', '–º–ø', '–º–ø—Ä–æ—Ñ', '–º–ø—Ä–æ—Ñ–∏–ª—å'])
async def _prof(app, msg):
    await msg.edit(f'{LOADING} –ó–∞–≥—Ä—É–∑–∫–∞...')
    answer = await make_request(app, '–ø—Ä–æ—Ñ–∏–ª—å', WORKER_CHAT, '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 10)
    await msg.edit(f"{SAD} –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" if answer is None else split_to(answer.text.html, '‚òÉÔ∏è'),
        disable_web_page_preview=True
    )

@cmd(['mstat', 'ms', 'mstats', '–º—Å—Ç–∞—Ç–∞', '–º—Å—Ç–∞—Ç', '–º—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
async def _stat(app, msg):    
    await msg.edit(f'{LOADING} –ó–∞–≥—Ä—É–∑–∫–∞...')
    answer = await make_request(app, '—Å—Ç–∞—Ç–∞', WORKER_CHAT, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 10)
    await msg.edit(f"{SAD} –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" if answer is None else answer.text.html,
        disable_web_page_preview=True
    )


@Client.on_message(
    filters.chat('mine_evo_bot') &
    ~filters.me &
    filters.regex('üîì –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è —à–∞—Ö—Ç–∞')
    ,
    group=get_group()
)
async def _new_cave(app, msg):
    await app.send_message('mine_evo_bot', msg.text[23:])

@Client.on_message(
    filters.chat('mine_evo_bot') &
    ~ filters.me &
    filters.regex("–†—É–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å")
    , group=get_group()
)
async def _dig_ore(app, msg):
    t, th = msg.text, msg.text.html
    """
    üéÜ  <b><i>–ü–ª–∞–∑–º–∞ +1</i></b> 

    ‚õè <b>–ú–∞—Ç–µ—Ä–∏—è II</b>  +<b>16.60Qi –µ–¥.</b> 
    <b><i>–†—É–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å :  100%  /  100%</i></b>
    """
    plasma, ore_type, ore_count = 0, '', 0
    s = BeautifulSoup(th, 'html.parser')
    if "–ü–ª–∞–∑–º–∞" in t:
        plasma = int(s.find('i').text[8:])

    ore_type = s.find_all('b')[-3].text
    ore_str_count = s.find_all('b')[-2].text
    ore_count = int(parse_amout(ore_str_count, pref))
    
    # app.print(f"–≤—ã–æ–∫–æ–ø–∞–ª {plasma = } | {ore_type = } | {ore_str_count = } | {ore_count = }")

    d = await app.db.get(M, 'stats', {})

    # app.print('–í—Å–µ–≥–æ' + str(d))

    ores = d.get('ores', {})
    ores[ore_type] = ores.get(ore_type, 0) + ore_count

    await app.db.set(M, 'stats', dict(
        plasma = d.get('plasma', 0) + plasma,
        ores = ores
    ))


    d = await app.db.get(M, 'stats_all', {})

    # app.print('–í—Å–µ–≥–æ –≤–æ–æ–±—â–µ ' + str(d))

    ores = d.get('ores', {})
    ores[ore_type] = ores.get(ore_type, 0) + ore_count

    await app.db.set(M, 'stats_all', dict(
        plasma = d.get('plasma', 0) + plasma,
        ores = ores
    ))


    await app.db.set(M, 'c',
        (await app.db.get(M, 'c', 0)) + 1
    )

    await app.db.set(M, 'all_c',
        (await app.db.get(M, 'all_c', 0)) + 1
    )
    

@Client.on_message(
    filters.chat('mine_evo_bot') &
    ~filters.me & (
        filters.regex('[‚ú®|üòÑ|üì¶|üßß|‚úâÔ∏è|üåå|üíº|üëú|üó≥|üïã|üíé|üé≤].*–ù–∞–π–¥–µ–Ω.*') |
        filters.regex('‚ö°Ô∏è.*–Ω–∞—à–µ–ª\(–ª–∞\).*') |
        filters.regex('üéâ –ë–æ—Å—Å')
    ),
    group=get_group()
)
async def _find_cases(_, msg):
    await msg.copy(LOG_CHAT)

