from pyrogram import __version__
from pyrogram.types import Message as M

from utils import (
    sec_to_str, plural, restart, get_args, get_group,
    Cmd, bot_uptime, helplist,
    b, a, code,
    HEADER,
    Module, Command, Argument as Arg,
    ModifyPyrogramClient as Client,
)

from main import version
from config import PREFIX, SHOW_HEADER_IN_HELP

import os, sys, time, time, json

cmd = Cmd(get_group())

@cmd(['me', 'start', 'menu'])
async def _me(_, msg: M):
    me_text = (
        HEADER + '\n'
        f"–í–µ—Ä—Å–∏—è: {b( version )}\n"
        f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {b(a('@RimMirK', 'https://t.me/RimMirK'), False)}\n"
        f"–ö–∞–Ω–∞–ª: {b(a('@RimTUB', 'https://t.me/RimTUB'), False)}\n"
        f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {b( sec_to_str(time.perf_counter() - bot_uptime))}\n"
        f"\n"
        f"<emoji id=5418368536898713475>üêç</emoji> Python: {b( sys.version.split()[0] )}\n"
        f"<emoji id=5246743576485832125>üî•</emoji> Pyrogram: {b( __version__ )}\n"
        f"<emoji id=5215186239853964761>üíø</emoji> –û–°: {b( sys.platform )}\n"
        f"\n"
        f"–ú–æ–¥—É–ª–∏ (–ø–ª–∞–≥–∏–Ω—ã): {b(helplist.get_modules_count())}\n"
        f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {b(sum([*map(lambda i: i.get_commands_count(), helplist.get_modules())]))}\n"
        f"–í—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {b(sum([*map(lambda i: i.get_features_count(), helplist.get_modules())]))}"
    )
    await msg.edit(me_text)



@cmd(['help', 'h'])
async def _help(_, msg: M):
    if mod_name := get_args(msg.text or msg.caption).lower():
        mod = helplist.get_module(mod_name, lower=True)
        if not mod:
            return await msg.edit(f"–ú–æ–¥—É–ª—å {mod_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π: "+code(PREFIX+'help'))
        
        help_text = (
            (HEADER + '\n\n' if SHOW_HEADER_IN_HELP else '') +
            f"–ú–æ–¥—É–ª—å {b(mod.name)}\n\n" +
            (f"–í–µ—Ä—Å–∏—è: {b(mod.version)}\n" if mod.version else '') +
            (f"–ê–≤—Ç–æ—Ä: {b(mod.author, False)}\n" if mod.author else '') +
            (f"–û–ø–∏—Å–∞–Ω–∏–µ: {b(mod.description, False)}\n" if mod.description else '') +
            ("\n\n" if any((mod.version, mod.author, mod.description)) else '') +
            b(f"–ö–æ–º–∞–Ω–¥—ã ({mod.get_commands_count()}):") + "\n"
        )
        for c in mod.get_commands():
            help_text += (
                "  " + b(c.description) + "\n" +
                "  " + ("|".join((code(PREFIX+command) for command in c.commands))) + "  " + 
                (" ".join(list(map(str, c.args)))) + '\n\n'
            )

        help_text += b(f"\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ({mod.get_features_count()})")
        help_text += ":\n" if mod.get_features_count() > 0 else "\n"
        for f in mod.get_features():
            help_text += "  " + b(f.name) + ":\n"
            help_text += "    " + "\n    ".join(f.description.split('\n'))
            help_text += "\n\n"

        help_text += f"\n{b('–õ–µ–≥–µ–Ω–¥–∞: ')}\n   {code('< >')} ‚Äì –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç\n   {code('[ ]')} ‚Äì –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.\n   {code(' / ')} ‚Äì –∏–ª–∏"

        return await msg.edit(help_text)

    help_text = (
        (HEADER + "\n" if SHOW_HEADER_IN_HELP else '') + 
        "\n"
        f"–ú–æ–¥—É–ª–∏ (–ø–ª–∞–≥–∏–Ω—ã): {b(helplist.get_modules_count())}\n"
    )
    commands_count = 0
    features_count = 0
    for module in helplist.get_modules():
        _commands_count = module.get_commands_count()
        _features_count = module.get_features_count()
        commands_count += _commands_count
        features_count += _features_count
        help_text += (
            f"    {code(module.name)}   " + (
                f"({b(_commands_count)} {plural(_commands_count, ('–∫–æ–º–∞–Ω–¥–∞', '–∫–æ–º–∞–Ω–¥—ã', '–∫–æ–º–∞–Ω–¥'))}"
                if _commands_count > 0 else ''
            ) + (' –∏ ' if _commands_count > 0 and _features_count > 0 else '') + (
                f"{ b(_features_count)} {plural(_features_count, ('–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', '–≤–æ–∑–º–æ–æ–∂–Ω–æ—Å—Ç–∏', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π'))})\n"
                if _features_count > 0 else ')\n'
            )
        )


    help_text += (
        f"(–≤—Å–µ–≥–æ {b(commands_count)} {plural(commands_count, ('–∫–æ–º–∞–Ω–¥–∞', '–∫–æ–º–∞–Ω–¥—ã', '–∫–æ–º–∞–Ω–¥'))} –∏ \n"
        f"{b(features_count)} {plural(features_count, ('–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', '–≤–æ–∑–º–æ–æ–∂–Ω–æ—Å—Ç–∏', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π'))})\n"
        f'\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è\n–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {code(PREFIX+"help")} [\xa0–Ω–∞–∑–≤–∞–Ω–∏–µ\xa0–º–æ–¥—É–ª—è\xa0]'
    )

    await msg.edit(help_text)




@cmd(['restart', 'reload'])
async def _resatrt(app, msg):
    await msg.edit("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Å—å...")
    restart(app.app_hash, msg.chat.id, msg.id)

@Client.on_ready()
async def _on_start(app):
    if len(sys.argv) >= 2:
        _, type_, *values = sys.argv
        if type_ == 'restart':
            app_hash, time_, chat_id, msg_id = values
            if app.app_hash != app_hash:
                return
            now = time.perf_counter()
            delta = now - float(time_)
            await app.edit_message_text(int(chat_id), int(msg_id), f'–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ –∑–∞ <b>{delta:.2f}s.</b>')



mod = Module(
    "Main",
    description="–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å RimTUB. –ü–æ–º–æ—â—å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ç",
    author="RimMirK",
    version='1.3.1'
)

mod.add_command(Command(['me', 'start', 'menu'], [], "–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é"))
mod.add_command(Command(['help', 'h'], [Arg('–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è', False)], "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"))
mod.add_command(Command(['restart', 'reload'], [], "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å RimTUB"))

helplist.add_module(mod)
